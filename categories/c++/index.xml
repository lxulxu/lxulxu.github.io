<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>C++ on lxulxu's blog</title><link>https://lxulxu.github.io/categories/c++/</link><description>Recent content in C++ on lxulxu's blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Fri, 05 Jul 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://lxulxu.github.io/categories/c++/index.xml" rel="self" type="application/rss+xml"/><item><title>C++中的push_back与emplace_back</title><link>https://lxulxu.github.io/posts/push_back_emplace_back/</link><pubDate>Fri, 05 Jul 2024 00:00:00 +0000</pubDate><guid>https://lxulxu.github.io/posts/push_back_emplace_back/</guid><description>&lt;p&gt;&lt;strong&gt;1. 引言&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;C++标准库提供了&lt;code&gt;push_back&lt;/code&gt;和&lt;code&gt;emplace_back&lt;/code&gt;两种向容器末尾添加元素的方法。本文将深入分析这两个函数的区别、使用场景，以及在实际应用中的性能考虑。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 基本概念&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;2.1 push_back
&lt;code&gt;push_back&lt;/code&gt;有两个重载版本：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style="color:#fabd2f"&gt;void&lt;/span&gt; &lt;span style="color:#fabd2f"&gt;push_back&lt;/span&gt;(&lt;span style="color:#fe8019"&gt;const&lt;/span&gt; T&lt;span style="color:#fe8019"&gt;&amp;amp;&lt;/span&gt; value);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt;2&lt;/span&gt;&lt;span&gt;&lt;span style="color:#fabd2f"&gt;void&lt;/span&gt; &lt;span style="color:#fabd2f"&gt;push_back&lt;/span&gt;(T&lt;span style="color:#fe8019"&gt;&amp;amp;&amp;amp;&lt;/span&gt; value);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;第一个版本复制元素，第二个版本移动元素。&lt;/p&gt;
&lt;p&gt;2.2 emplace_back
&lt;code&gt;emplace_back&lt;/code&gt;是C++11引入的变参模板函数：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style="color:#fe8019"&gt;template&lt;/span&gt; &lt;span style="color:#fe8019"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#fe8019"&gt;class&lt;/span&gt;... Args&lt;span style="color:#fe8019"&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt;2&lt;/span&gt;&lt;span&gt;&lt;span style="color:#fabd2f"&gt;void&lt;/span&gt; emplace_back(Args&lt;span style="color:#fe8019"&gt;&amp;amp;&amp;amp;&lt;/span&gt;... args);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;它直接在容器中构造对象，参数被完美转发给元素的构造函数。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. 主要区别&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;构造方式&lt;/strong&gt;：&lt;code&gt;push_back&lt;/code&gt;需要预先构造的对象，&lt;code&gt;emplace_back&lt;/code&gt;在容器内构造对象。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;参数传递&lt;/strong&gt;：&lt;code&gt;push_back&lt;/code&gt;接受对象，&lt;code&gt;emplace_back&lt;/code&gt;接受构造函数参数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;效率&lt;/strong&gt;：&lt;code&gt;emplace_back&lt;/code&gt;可能避免不必要的临时对象创建和复制/移动操作。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;灵活性&lt;/strong&gt;：&lt;code&gt;emplace_back&lt;/code&gt;可直接传递构造函数参数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;编译复杂度&lt;/strong&gt;：&lt;code&gt;emplace_back&lt;/code&gt;作为变参模板可能增加编译时间和内存使用。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;4. 使用示例&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;4.1 简单类型&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt;1&lt;/span&gt;&lt;span&gt;std&lt;span style="color:#fe8019"&gt;::&lt;/span&gt;vector&lt;span style="color:#fe8019"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#fabd2f"&gt;int&lt;/span&gt;&lt;span style="color:#fe8019"&gt;&amp;gt;&lt;/span&gt; vec;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt;2&lt;/span&gt;&lt;span&gt;vec.push_back(&lt;span style="color:#d3869b"&gt;10&lt;/span&gt;); &lt;span style="color:#928374;font-style:italic"&gt;// push_back 足够简单高效
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;4.2 复杂对象构造&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt;1&lt;/span&gt;&lt;span&gt;std&lt;span style="color:#fe8019"&gt;::&lt;/span&gt;vector&lt;span style="color:#fe8019"&gt;&amp;lt;&lt;/span&gt;std&lt;span style="color:#fe8019"&gt;::&lt;/span&gt;pair&lt;span style="color:#fe8019"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#fabd2f"&gt;int&lt;/span&gt;, std&lt;span style="color:#fe8019"&gt;::&lt;/span&gt;string&lt;span style="color:#fe8019"&gt;&amp;gt;&amp;gt;&lt;/span&gt; vec;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt;2&lt;/span&gt;&lt;span&gt;&lt;span style="color:#928374;font-style:italic"&gt;// 使用 push_back
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt;3&lt;/span&gt;&lt;span&gt;&lt;span style="color:#928374;font-style:italic"&gt;&lt;/span&gt;vec.push_back(std&lt;span style="color:#fe8019"&gt;::&lt;/span&gt;make_pair(&lt;span style="color:#d3869b"&gt;1&lt;/span&gt;, &lt;span style="color:#b8bb26"&gt;&amp;#34;one&amp;#34;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt;4&lt;/span&gt;&lt;span&gt;&lt;span style="color:#928374;font-style:italic"&gt;// 使用 emplace_back
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt;5&lt;/span&gt;&lt;span&gt;&lt;span style="color:#928374;font-style:italic"&gt;&lt;/span&gt;vec.emplace_back(&lt;span style="color:#d3869b"&gt;1&lt;/span&gt;, &lt;span style="color:#b8bb26"&gt;&amp;#34;one&amp;#34;&lt;/span&gt;); &lt;span style="color:#928374;font-style:italic"&gt;// 更简洁，直接传递构造函数参数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;4.3 不可移动类型&lt;/p&gt;</description></item></channel></rss>