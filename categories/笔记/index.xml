<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>笔记 on lxulxu's blog</title><link>https://lxulxu.github.io/categories/%E7%AC%94%E8%AE%B0/</link><description>Recent content in 笔记 on lxulxu's blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sun, 28 Apr 2024 08:20:35 +0000</lastBuildDate><atom:link href="https://lxulxu.github.io/categories/%E7%AC%94%E8%AE%B0/index.xml" rel="self" type="application/rss+xml"/><item><title>C++安全指南</title><link>https://lxulxu.github.io/posts/cplusplus_security_guide/</link><pubDate>Sun, 28 Apr 2024 08:20:35 +0000</pubDate><guid>https://lxulxu.github.io/posts/cplusplus_security_guide/</guid><description>编程习惯 switch中应有default 不应在debug或错误信息中提供过多内容 不应该在客户端代码中硬编码对称加密秘钥 // Bad char g_aes_key[] = {...}; void Foo() { .... AES_func(g_aes_key, input_data, output_data); } // Good char* g_aes_key; void Foo() { .... AES_encrypt(g_aes_key, input_data, output_data); } void Init() { g_aes_key = get_key_from_https(user_id, ...); } 函数不可以返回栈上的变量的地址，而应当使用堆来传递非简单类型变量，强烈建议返回 string、vector 等类型。 // Bad char* Foo(char* sz, int len){ char a[300] = {0}; if (len &amp;gt; 100) { memcpy(a, sz, 100); } a[len] = &amp;#39;\0&amp;#39;; return a; // WRONG } // Good char* Foo(char* sz, int len) { char* a = new char[300]; if (len &amp;gt; 100) { memcpy(a, sz, 100); } a[len] = &amp;#39;\0&amp;#39;; return a; // OK } 有逻辑联系的数组必须仔细检查 // Good const int nWeekdays[] = {1, 2, 3, 4, 5, 6, 7}; const char* sWeekdays[] = {&amp;#34;Mon&amp;#34;, &amp;#34;Tue&amp;#34;, &amp;#34;Wed&amp;#34;, &amp;#34;Thu&amp;#34;, &amp;#34;Fri&amp;#34;, &amp;#34;Sat&amp;#34;, &amp;#34;Sun&amp;#34;}; assert(ARRAY_SIZE(nWeekdays) == ARRAY_SIZE(sWeekdays));//确保有关联的nWeekdays和sWeekdays数据统一 for (int x = 0; x &amp;lt; ARRAY_SIZE(sWeekdays); x++) { if (strcmp(sWeekdays[x], input) == 0) { return nWeekdays[x]; } } 在头文件、源代码、文档中列举的函数声明应当一致，不应当出现定义内容错位的情况 错误示例： foo.</description></item><item><title>《高质量C++编程指南》笔记</title><link>https://lxulxu.github.io/posts/high_quality_cpp_programming_notes/</link><pubDate>Sun, 04 Sep 2022 11:51:33 +0000</pubDate><guid>https://lxulxu.github.io/posts/high_quality_cpp_programming_notes/</guid><description>文件结构 头文件结构 //版权和版本声明 /* * Copyright (c) 2001,上海贝尔有限公司网络应用事业部 * All rights reserved. * * 文件名称：graphics.h * 文件标识：见配置管理计划书 * 摘 要：简要描述本文件的内容 * * 当前版本：1.1 * 作 者：输入作者（或修改者）名字 * 完成日期：2001年7月20日 * * 取代版本：1.0 * 原作者 ：输入原作者（或修改者）名字 * 完成日期：2001年5月10日 */ #ifndef GRAPHICS_H // 防止 graphics.h 被重复引用 #define GRAPHICS_H #include &amp;lt;math.h&amp;gt; // 引用标准库的头文件 ... #include “myheader.h” // 引用非标准库的头文件 ... void Function1(...); // 全局函数声明 ... class Box // 类结构声明 { ... }; #endif 版权和版本的声明 版权信息。 文件名称，标识符，摘要。 当前版本号，作者/修改者，完成日期。 版本历史信息。 预处理块 为了防止头文件被重复引用，应当用 ifndef/define/endif 结构产生预处理块</description></item></channel></rss>